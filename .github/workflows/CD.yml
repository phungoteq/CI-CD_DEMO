name: CD Pipeline

on:
  push:
    branches:

env:
  PYTHON_VERSION: "3.11"

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.get-release-notes.outputs.content }}
      branch_name: ${{ steps.get-branch-name.outputs.name }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract release notes
        id: get-release-notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NOTES=$(git tag -l --format='%(contents)' "$TAG_NAME" || echo "No release notes")
          echo "content=$NOTES" >> $GITHUB_OUTPUT

      - name: Get branch name
        id: get-branch-name
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "name=$BRANCH" >> $GITHUB_OUTPUT

  unit-test:
    needs: prebuild
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.run-tests.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5

      - name: Run tests
        id: run-tests
        continue-on-error: true 
        run: |
          # Thay bằng lệnh test thực tế của bạn 
          echo "result=success" >> $GITHUB_OUTPUT

  manual-approval:
    needs: unit-test
    if: ${{ needs.unit-test.outputs.test_status == 'failure' }}
    runs-on: ubuntu-latest
    
    environment:
      name: production-gate 
    
    steps:
      - name: Require human approval 
        run echo "Approvals required via Environment settings"

  auto-deploy:
    needs:
      - prebuild 
      - unit-test 
    
    if:${{ success() && needs.unit-test.outputs.test_status == 'success' }}
    
    environment:
      name production
    
    steps:[...]

  approved-deploy:
    needs:
      - prebuild 
      - unit_test 
      - manual_aprove
    
     if:${{ failure() && need.unittest.output.status == fail }}
    
     environment production
    
     steps:[...]
