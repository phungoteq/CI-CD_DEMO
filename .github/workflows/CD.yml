name: CD Pipeline

on:
  push:
    branches: 
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.get-release-notes.outputs.content }}
      branch_name: ${{ steps.get-branch-name.outputs.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get release notes
      id: get-release-notes
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        NOTES=$(git tag -l --format='%(contents)' "$TAG_NAME" || echo "No release notes")
        echo "content=$NOTES" >> $GITHUB_OUTPUT

    - name: Get branch name
      id: get-branch-name
      run: |
        BRANCH=${GITHUB_REF#refs/heads/}
        echo "name=$BRANCH" >> $GITHUB_OUTPUT

  unit-test:
    needs: prebuild
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.run-tests.outputs.result }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Run tests
      id: run-tests
      continue-on-error: true
      run: |
        if poetry run pytest; then
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
        fi

  manual-approval:
    needs: unit-test
    if: ${{ needs.unit-test.outputs.test_status == 'failure' }}
    runs-on: ubuntu-latest
    environment:
      name: production-approval
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
    - name: Wait for approval
      run: echo "Manual approval required for deployment"

  deploy:
    needs:
      - prebuild
      - unit-test
      - manual-approval
    if: |
      (needs.unit-test.outputs.test_status == 'success') ||
      (needs.unit-test.outputs.test_status == 'failure' && needs.manual-approval.result == 'success')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-url.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Show deployment info
      run: |
        echo "🚀 Deploying version ${{ github.ref_name }}"
        echo "📌 Source branch: ${{ needs.prebuild.outputs.branch_name }}"
        echo "📝 Release notes:"
        echo "${{ needs.prebuild.outputs.release_notes }}"

    - name: Perform deployment
      run: |
        # Add your deployment commands here
        echo "✅ Successfully deployed!"
