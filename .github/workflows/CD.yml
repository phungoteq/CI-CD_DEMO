name: CD Pipeline

on:
  push:
    branches:
      - main
      - feature/*
    tags:
      - 'v*.*.*'

env:
  PYTHON_VERSION: "3.11"

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.get-release-notes.outputs.content }}
      branch_name: ${{ steps.get-branch-name.outputs.name }}
      is_production: ${{ contains(github.ref, 'tags/v') }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract release notes
      id: get-release-notes
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NOTES=$(git tag -l --format='%(contents)' "$TAG_NAME" || echo "No release notes")
        else
          NOTES="Deployment from branch ${GITHUB_REF#refs/heads/}"
        fi
        echo "content=$NOTES" >> $GITHUB_OUTPUT

    - name: Get branch/tag info
      id: get-branch-name
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        fi

  unit-test:
    needs: prebuild
    runs-on: ubuntu-latest
    outputs:
      test_status: ${{ steps.run-tests.outputs.result }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      run: pip install poetry==1.8.2

    - name: Run tests
      id: run-tests
      continue-on-error: true
      run: |
        if poetry run pytest; then
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
        fi

  manual-approval-cd:
    needs: 
      - prebuild
      - unit-test
    if: |
      ${{ needs.unit-test.outputs.test_status == 'failure' }} &&
      ${{ needs.prebuild.outputs.is_production == 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: production-gate
      url: ${{ github.server_url }}/${{ github.repository }}

    steps:
    - name: Require approval
      run: echo "🛑 Manual approval required for production deployment"

  deploy:
    needs:
      - prebuild
      - unit-test
      - manual-approval-cd # Chỉ phụ thuộc khi cần approval
    
    # Điều kiện triển khai:
    # 1. Test pass HOẶC 
    # 2. Test fail nhưng đã approve + là deployment production 
    if: |
      (needs.unit-test.outputs.test_status == 'success') ||
      (needs.unit-test.outputs.test_status == 'failure' &&
       needs.prebuild.outputs.is_production == 'true' &&
       needs.manual-approval-cd.result == 'success')
    
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ needs.prebuild.outputs.is_production == 'true' && 'production' || 'staging' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deployment info
      run: |
        echo "🚀 Deploying to ${{ env.DEPLOY_ENV }}"
        echo "📌 Source: ${{ needs.prebuild.outputs.branch_name }}"
        echo "📝 Release notes:" 
        echo "${{ needs.prebuild.outputs.release_notes }}"
    
    - name: Execute deployment
      run: |
        # Thêm lệnh triển khai thực tế của bạn ở đây 
        echo "✅ Successfully deployed!"
