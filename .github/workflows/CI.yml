name: CD Pipeline

on:
  push:
    branches:
      - main 
      - feature/*
    tags:
      - 'v*.*.*'

env:
  PYTHON_VERSION: "3.11"
  DEPLOY_ENV: ${{ contains(github.ref, 'tags/v') && 'production' || 'staging' }}

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.get-release-notes.outputs.content }}
      branch_name: ${{ steps.get-branch-name.outputs.name }}
      tag_name: ${{ steps.get-tag-name.outputs.name }}

    steps:
    - uses: actions/checkout@v4

    - name: Extract release notes from tag 
      id: get-release-notes
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NOTES=$(git tag -l --format='%(contents)' "$TAG_NAME" || echo "No release notes")
        else 
          NOTES="Deployment from branch ${GITHUB_REF#refs/heads/}"
        fi
        echo "content=$NOTES" >> $GITHUB_OUTPUT

    - name: Get branch/tag info 
      id: get-branch-name 
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then 
          echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT 
        else 
          echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT 
        fi 

    - name: Get tag version 
      id: get-tag-name 
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "name=$TAG_NAME" >> $GITHUB_OUTPUT 

  unit-test:
    needs: prebuild 
    runs-on ubuntu-latest 
    outputs:
      test_status ${{ steps.run-tests.outputs.result }} 

    steps:
    - uses actions/checkout@v4 

    - name Setup Python ${{ env.PYTHON_VERSION }} 
      uses actions/setup-python@v5 

    - name Run tests with coverage 
      id run-tests 
      continue-on-error true 
      run | 
        poetry run pytest --cov=myapp || exit_code=$?
        echo "result=$(if [[ $exit_code -eq 0 ]]; then echo 'success'; else echo 'failure'; fi)" >> $GITHUB_OUTPUT 

  manual-prod-approval:
    needs [prebuild unit-test] 
    if |-
      needs.prebuild.outputs.tag_name != '' && 
      needs.unit-test.outputs.test_status == 'failure' 
    
    runs-on ubuntu-latest 
    
    environment test-approval

    steps |-
      - name Require approval from Ops team  
        run echo "🛑 Manual approval required via GitHub Environment"

  deploy |-
    needs [prebuild unit-test manual-prod-approval] 

    environment |-
      name ${{ env.DEPLOY_ENV }}  
      url https://$DEPLOY_ENV.example.com 

    steps |-
      - uses actions/checkout@v4 

      - name Show deployment info  
        run |-
          echo "🔨 Deploying version ${{ needs.prebuild.outputs.tag_name || needs.prebuild.outputs.branch_name }}"  
          echo "📝 Release notes:"  
          echo "${{ needs.prebuild.outputs.release_notes }}"  
